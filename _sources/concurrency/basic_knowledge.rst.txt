并发编程实践 基础知识
============================

.. post:: 19 Mar 2021
   :category: Java, Java基础, 并发 
   :tags: Java, 并发
   :author: me

线程安全性
-------------------   

同步术语：

* synchronized
* volatile 类型
* 显示锁
* 原子变量

.. note::

   当多个线程访问同一个可变的状态时没有使用合适的同步，那么会出错，有三种方式修复这个问题：
      * 不在线程之间共享该状态变量
      * 将状态变量修改为不可变的变量
      * 在访问状态变量时使用同步

线程安全::

   当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，
   并且在主调代码中不需要额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。

   
.. note::

   要保持状态一致性，就需要在单个原子操作中更新所有相关的状态变量。

## 内置锁

Java提供了一种内置锁来支持原子性： 同步代码块（Synchronized Block）。同步代码块包括两部分：一个作为锁对象引用，一个作为由这个
锁保护的代码块。以关键词``synchronized``来修饰的方法就是一种横跨整个方法体的同步代码块。

.. code-block:: Java

   synchronized(lock) {
      方法体
   }

每个Java对象都可以用做一个实现同步的锁，这些锁称为**内置锁或监视器锁**。线程在进入同步代码块之前会自动获取锁，并且在退出代码块的时自动
释放锁，而无论是通过正常的控制路径退出，还是通过从代码块中抛出异常退出。获得内置锁的唯一途径就是进入由这个锁保护的同步代码块或方法。

Java内置锁相当于一种互斥锁，。意味着：最多只有一个线程能持有这种锁。当线程A尝试获取一个由线程B持有的锁时，线程A必须等待或者阻塞，直到
线程B释放这个锁时，如果B永远不释放，那么A也将永远等下去。

## 重入

如果某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功。

重入的一种实现方法::

   为每个锁关联一个获取计数值和一个所有者线程。当计数值为0时，这个锁就被认为是没有被任何线程持有的。当线程请求一个未被持有的锁时，
   JVM将记下持有者，并且将获取计数值置为1。如果同一个线程再次获取这个锁，计数值将递增，而当线程退出同步代码时，计数器会相应地递减。
   当计数值为0时，这个锁将被释放。

## 用锁来保护状态

当使用锁来协调对某个变量的访问时，在访问变量的所有位置上都要使用同一个锁。

一种常见的**错误**是认为： 只有在写入共享变量时才需要使用同步。

.. note:: 

   对于可能被多个线程同时访问的可变状态变量，在访问它时都需要持有同一个锁，在这种情况下，我们称状态变量是由这个锁保护的。

当某个变量由锁来保护时，意味着在每次访问这个变量时都需要首先获得锁，这样就确保在同一时刻只有一个线程可以访问这个变量。当类的不可变性条件
涉及多个状态变量时，那么还有另外一个需求：在不变性条件中的每个变量都必须由同一个锁来保护。

.. note::

   对于每个包含多个变量的不变性条件，其中涉及的所有变量都需要由同一个锁来保护。

对象的共享
---------------

编写正确的并发程序，关键问题在于：在访问共享的可变状态时需要进行正确的管理。线程安全性和共享管理形成了构建线程安全类以及通过
java.util.concurrent类库来构建并发应用程序的重要基础。

.. code-block:: java

   @ThreadSafe
   public class SynchronizedInteger {
      @GuardedBy("this") private int value;

      public synchronized int get() { return value; }
      public synchronized void set(int value) { this.value = value; }
   }

.. seealso::

   加锁的含义不仅仅局限于互斥行为，还包括内存可见性。为了确保所有线程都能看到共享变量的最新值，所有执行
   读操作或者写操作的线程都必须在同一个锁上同步。

## Volatile 变量

volatile变量，用来确保将变量的最新操作通知到其他线程。当把变量声明为``volatile``类型后，编译器与运行时都会注意到这个变量是共享的，
因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型
的变量时总是返回最新写入的值。

**volatile变量是一种比Synchronized关键词更轻量级的同步机制**。

volatile的正确使用方式： 确保它们自身状态的可见性，确保它们所引用对象的状态的可见性。

volatile变量的典型用法：

.. code-block:: java

   volatile boolean asleep;

   while (!asleep) {
      countSomeSheep();
   }

.. note::

   加锁机制即可以确保可见性又可以确保原子性，而volatile变量只能确保可见性。

当且仅当满足以下所有条件时，才应该使用volatile变量：

* 对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值
* 该变量不会与其他状态变量一起纳入不变性条件中。
* 在访问变量时不需要加锁。

发布和逸出
---------------

发布一个对象的意思是指： 使对象能够在当前作用域之外的代码中使用。例如，将一个指向该对象的引用保存到其他代码可以访问的地方，或者在某一个非
私有的方法中返回该引用，或者将引用传递到其他类的方法中。

逸出：当某个不应该发布的对象被发布时。

发布对象最简单方法：**将对象的引用保存到一个公有的静态变量中，以便任何类和线程都能够看见该对象**

.. code-block:: java

   public class ThisEscape {
      public ThisEscape(EventListener source) {
         source.registerListener(
            new EventListener() {
               public void onEvent(Event e) {
                  doSomething(e);
               }
            }
         );
      }
   }

不要在构造过程中使this引用逸出

使用工厂方法来防止this引用在构造过程中逸出

.. code-block:: java

   public class SafeListener {
      private final EventListener listener;

      private SafeListener () {
         listener = new EventListener() {
            public void onEvent(Event e) {
               doSomething(e);
            }
         };
      }

      public static SafeListener newInstance(EventListener source) {
         SafeListener safe = new SafeListener();
         source.registerListener(Safe.listener);
         return safe;
      }
   }

## 栈封闭

栈封闭是线程封闭的一种特例，在栈封闭中，只有通过局部变量才能访问对象。

对于基本类型的局部变量，无论如何都不会破坏栈封闭性。**由于任何方法都无法获得对基本类型的引用**。

.. code-block:: java

   public int loadTheArk(Collection<Animal> candidates) {

      SortedSet<Animal> animals;
      int numPairs = 0;
      Animal candidate = null;

      // animals 被封闭在方法中，不要使它们逸出
      animals = new TreeSet<Animal> (new SpeciesGenderComparator());
      animals.addAll(candidates);

      for (Animal a : animals) {
         if (candidate == null || !candidate.isPotentialMate(a))
            candidate = a;
         else {
            ark.load(new AnimalPair(candidate, a));
            ++numPairs;
            candidate = null;
         }
      }
      return numPairs;
   }

## ThreadLocal类

维持线程封闭性的一种更规范方法是使用``ThreadLocal``,这个类能使线程中的某个值与保存值的对象关联起来。
可以将``ThreadLocal<T>``视为包含了``Map<Thread, T>``对象，其中保存了特定于该线程的值。

ThreadLocal变量类似于全局变量，它能降低代码的可重用性，并在类之间引入隐含的耦合性，因此在使用时要格外小心。

## 不变性

满足同步需求的另一种方法是使用不可变对象。

.. note::

   不可变对象一定是线程安全的。

满足以下条件时，对象才是不可变的::

* 对象创建以后其状态就不能修改
* 对象的所有域都是final类型
* 对象是正确创建的（在对象创建期间，this引用没有逸出）

## final域

final类型是不能修改的（如果final所引用的对象是可变的，那么这些被引用的对象是可以修改的）。然而，在Java
内存模型中，final域还有着特殊的语义。final域能确保初始化过程的安全性，从而可以不受限制地访问不可变对象，并在
共享对象时无须同步。

## 安全发布的常用模式

.. note::

   要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见，一个正确构造的对象可以通过以下方式来安全的发布：

   * 在静态初始化函数中初始化一个对象引用
   * 将对象的引用保存到volatile类型的域或者AtomicReferance对象中
   * 将对象的引用保存到某个正确构造对象的final类型域中
   * 将对象的引用保存到一个由锁保护的域中
