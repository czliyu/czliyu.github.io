Effective Java 对于所有对象都通用的方法
========================================

.. post:: 5 Mar 2021
   :category: Java, Java基础, Effective-java
   :tags: Java, Effective-java
   :author: me

Object所有的非final方法（equals、hashCode、toString、clone和finalize）都有明确的
通用约束。

10、覆盖equals时请遵守通用约定
---------------------------------------

下面情况，类不需要覆盖equals：

1、类的每个实例本质上都是唯一的。
2、类没有必要提供“逻辑相等”的测试功能。
3、超类已经覆盖了equals，超类的行为对于这个类也是合适的。
4、类时私有的，或者是包级别的，可以确定它的equals方法永远不会被调用。

应该覆盖equals方法：

类具有自己特有的“逻辑相等”，这通常属于 *值（value）* 相等的情形。

在覆盖equals的方法，需要遵守的通用约定：

* 自反性（reflexive）：对于任何非null的引用值x，x.equals(x)必须返回true
* 对称性（symmetric）: 对于任何非null的引用值x和y，当且仅当y.equals(x)返回true，x.equals(y)也必须返回true
* 传递性 (ransitive)：对于任何非null的引用值x，y和z，如果x.equals(y)返回true，并且y.equals(z)返回true,那么x.equals(z)必须返回true。
* 一致性（consistent）: 对于任何非null的引用值x和y，只要equals的比较操作在对象中所用的没有被修改，多次调用x.equals(y)就会一致返回true，或者一致返回false。
* 对于任何非null的引用值x，x.equals(null)必须返回false。

根据通用约定构建equals方法的具体例子：

.. code-block:: java

   public final class PhoneNumber {
      private final short areaCode, prefix, lineNum;

      public PhoneNumber(int areaCode, int prefix, int lineNum) {
         this.areaCode = rangeCheck(areaCode, 999, "area code");
         this.prefix = rangeCheck(prefix, 999, "prefix");
         this.lineNum = rangeCheck(lineNum, 9999, "line num");
      }

      private static short rangeCheck(int val, int max, String arg) {
         if (val < 0 || val > max) {
            throw new IllegalArgumentException(arg + ":" + val);
         }
         return (short) val;
      }

      @Override
      public boolean equals(Object o) {
         if (o == this)
            return true;
         if (!(o instanceof PhoneNumber))
            return false;
         PhoneNumber pn = (PhoneNumber) o;
         return pn.lineNum == lineNum && pn.prefix == prefix && pn.areaCode == areacCode;
      }
   }


编写equals的告诫：

* 覆盖equals时总要覆盖hashCode
* 不要企图让equals方法过于智能。
* 不要将equals声明中的Object对象替换为其他的类型。


11、覆盖equals时总要覆盖hashCode
------------------------------------

* 如果equals(Obejct) 是相等的，那么hashCode一定相等
* 如果equals(Object) 不相等，那么hashCode可能会相等

为PhoneNumber添加hashCode:

.. code-block:: java

    @Override
    public int hashCode() {
        int result = Short.hashCode(areacCode);
        result = 31 * result + Short.hashCode(prefix);
        result = 31 * result + Short.hashCode(lineNum);
        return result;
    }

> 之所以选择31，因为它是一个奇素数。因为与2相乘等价于移位运算。31有个特性，即用移位和减法
来代替乘法，可以得到很好的性能: 31 * i == (i << 5) - i;

Objects.hash可以使用任意数量的对象编写hashCode，遗憾的是运行速度慢一些，建议只将这类
散列函数用于不太注重性能的情况。

12、始终要覆盖toString
--------------------------

所有的子类都覆盖这个方法

.. code-block:: java

    @Override
    public String toString() {
        return String.format("%03d-%03d-%04d", areaCode, prefix, lineNum);
    }

13、谨慎地覆盖clone
------------------------

如果一个类实现了Cloneable，Object的clone方法就返回改对象的逐域拷贝，否则就会抛出
CloneNotSupportedException异常。

clone方法的通用约定：

.. code-block:: java

   x.clone() != x;// true
   x.clone().getClass() == x.getClass(); // true
   x.clone().equals(x); // true

.. code-block:: java

   public class Stack {
      private Object[] elements;
      private int size = 0;
      private static final int DEFAULT_INITIAL_CAPACITY = 16;

      public Stack() {
         this.elements = new Object[DEFAULT_INITIAL_CAPACITY];
      }

      public void push(Object e) {
         ensureCapacity();
         elements[size++] = e;
      }

      public Object pop() {
         if (size == 0) {
            throw new EmptyStackException();
         }
         Object result = elements[--size];
         elements[size] = null; // 不怎么做 垃圾回收器不会回收
         return result;
      }

      private void ensureCapacity() {
         if (elements.length == size)
            elements = Arrays.copyOf(elements, 2 * size + 1);
      }
   }

实际上，clone方法就是另一个构造器；必须确保它不会伤害到原始对象，并确保正确地创建被克隆
对象中的约定条件。

为Stack实现clone：

.. code-block:: java

   @Override
   public Stack clone() {
      try {
         Stack result = (Stack) super.clone();
         result.elements = elements.clone();
         return result;
      } catch (CloneNotSupportedException e){
         throw new AssertionError();
      }
   }

> 如果每个域包含一个基本类型的值，或者包含一个指向不可变对象的引用，那么被返回的对象则可能
正是你所需要的对象`return (PhoneNumber) super.clone();`，在这种情况下不需要进一步处理。

*对象拷贝最好的办法是提供一个拷贝构造器或拷贝工厂* (这条规则最绝对的例外是数组，数组最好利用clone方法)

.. code-block:: java

   // 拷贝构造器
   public Yum(Yum yum) {}

   // 拷贝工厂
   public static Yum newInstance(Yum yum) {}

14、实现Comparable接口
-------------------------

compareTo方法的通用约定：

* 实现者必须确保所有的x和y都满足sgn(x.compareTo(y)) == -sgn(y.compareTo(x))。
* 实现者必须确保这个比较关系是可传递的：`x.compareTo(y) > 0 && y.compareTo(z) > 0; x.compareTo(z) > 0`
* 实现者必须确保x.compareTo(y) == 0，暗示所有的`sgn(x.compareTo(z)) == sgn(y.compareTo(z))`

在compareTo方法中使用关系操作符`<`或`>`是非常烦琐的，并且容易出错，因此建议使用
`Double.compare(a, b) / Float.compare(a, b)`;

按最关键的域开始，逐步进行到所有的重要域的顺序来比较

.. code-block:: java

   public int compareTo(PhoneNumber pn) {
      int result = Short.compare(areaCode, pn.areacCode);
      if (result == 0) {
         result = Short.compare(prefix, pn.prefix);
         if (result == 0) {
            result = Short.compare(lineNum, pn.lineNum);
         }
      }
      return result;
   }

Comparator接口配置了一组比较器构造器方法，使得比较器的构造工作变得非常流畅。

.. code-block:: java

   private static final Comparator<PhoneNumber> COMPARATOR = comparingInt((PhoneNumber pn) -> pn.areacCode)
         .thenComparingInt(pn -> pn.prefix)
         .thenComparingInt(pn -> pn.lineNum);

   public int compareTo(PhoneNumber pn) {
      return COMPARATOR.compareTo(this, pn); 
   }

