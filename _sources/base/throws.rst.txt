使用异常的技巧
======================

.. post:: 14 Apr, 2020
   :tags: base, Exception,java
   :category: base, 异常, 面向对象
   :author: me


如何适当使用异常有很大的争议，有些程序员认为所有的检查型异常都令人厌烦，有些程序员认为抛出的异常还不够多。

使用异常的一些技巧


1、异常处理不能代替简单的测试

作为一个示例，试着讲一个空栈弹出10000000次，首先，在弹栈之前先查看栈是否为空。


.. code-block:: java

   if (!s.empty()) s.pop();

   try
   {
        s.pop();
   }
   catch (EmptyStackException e)
   {
   }

调用isEmpty的版本运行时间为646ms，捕获EmptyStackException的版本运行时间为21739ms

因此使用异常的基本原则: *只在异常情况下使用异常*

2、不要过分细化异常

很多程序员习惯将每一条语句都分装在一个独立的try语句块中

异常处理的一个承诺: *将正常处理与错误处理分开*

3. 充分利用异常层次结构

不要只抛出RuntimeException异常，应该寻找一个适合的子类或创建自己的异常类

不要只捕获Throwable异常，否则会使你的代码难读、更难维护。

考虑检查型异常和非检查型异常的区别，检查型异常本来就很庞大，不要为逻辑错误抛出这些异常。

如果能够将一种异常转换成另一种更加适合的异常，例如，在解析某个文件中的一个整数时，可以捕获NumberFormatException异常，然后转换成IOException的一个子类或MySubSystemException

4、不要压制异常

在java中，往往非常希望关闭异常，如果编写了一个方法要调用另外一个方法，而那个方法可能100年才抛出一个异常，但是，如果没有在你的方法的throws列表中声明这个异常，编译器就会报错。不想把它放在throws列表中，因为这样一来，编译器会对调用了你的方法的所有方法报错，因此，你会将这个异常关闭

5、在检测错误时，“苛刻”要比放任更好

当检测到错误的时候，程序员对抛出的异常很担心。在用无效的参数调用一个方法时，返回一个虚拟值是否比抛出一个异常更好？例如，当栈为空时，Stack.pop()是该返回一个null，还是要抛出一个异常？


最好在出错地方抛出一个EmptyStackException异常。

6、不要羞于传递异常

程序员都感觉应该捕获抛出的全部异常，如果调用了一个抛出异常的方法，例如，FileInputStream构造器或readline方法，它们会本能地捕获这些可能产生的异常。最好继续传递这个异常，而不是自己捕获。 


> 5、6 可以归纳为“早抛出，晚捕获”
