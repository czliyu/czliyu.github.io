oop设计技巧
=============

.. post:: 22 Mar 2020
   :tags: oop,类,基础, 面向对象
   :category: oop,类,基础, 面向对象
   :author: me

类的设计技巧
-------------

1、一定要保证数据私有

这是 **最重要** 的：绝对不要破环封装性。可以编写一个访问器方法或更改器方法，但是最好
还是保持实例的私有性。当数据保持私有时，表示形式的变化不会对类的使用者产生影响，
而且更容易检测bug

2、一定要对数据进行初始化

Java不会为你初始化局部变量，但是会对对象的实例字段进行初始化。最好不要依赖于系统的默认值，
而是应该显式地初始化所有的数据。

3、不要在类中使用过多的基本类型

用其他的类替换使用多个相关的基本类型。这样使类易于理解，也更易于修改。2、一定要对数据进行初始化

Java不会为你初始化局部变量，但是会对对象的实例字段进行初始化。最好不要依赖于系统的默认值，
而是应该显式地初始化所有的数据。

4、不要在类中使用过多的基本类型

用其他的类替换使用多个相关的基本类型。这样使类易于理解，也更易于修改。
比如：用一个名为Address的新类替换一个Customer类中以下的实例字段::

    private String steet;
    private String city;
    private String state;
    private int zip;

可能需要处理国际地址。

5、不是所有的字段都需要单独的字段访问器和字段更改器

可能需要获得或设置员工的工资，而一旦构造了员工对象，肯定不需要更改雇用日期。

6、分解有过多职责的类

7、类名和方法名要能够提现它们的职责

变量应该有一个能够反映其含义的名字一样，类也应该如此。

有一个很好的惯例：类名应当是一个名词。或者前面有形容词修饰的名词。或者是有动名词修饰的名词

方法标准惯例：访问器方法用小写get开头(getSalary),更改方法用小写的set开头(setSalary)

8、优先使用不可变的类

没有方法能修改对象的状态，如果类是不可变的，就可以安全地在多个线程间共享其对象。
因此尽可能让类不可变的，这是一个很好的想法，如一个字符串或一个时间点，计算会生成新值，而不是更新原来的值。
并不是所有类都应当是不可变的，如果员工加薪时让raiseSalary方法返回一个Employee对象。这就很奇。


继承的设计技巧
----------------

1、将公共操作和字段放在超类中

2、不要使用受保护的字段

`protected` 机制并不能够带来更多的保护，第一，子类集合是无限制的，任何一个人都能够由你的类派生一个子类，
然后编写代码直接访问 `protected` 字段，从而破坏了封装性，第二，在java中，在同一个包中的所有类都可以访问 `protected` 实例字段,
而不管它们是否为这个类的子类

3、使用继承实现 “is-a” 关系

使用继承很容易达到节省代码量的目的，

4、除非所有继承的方法都有意义，否则不要使用继承

5、在覆盖方法时，不要改变预期的行为

6、使用多态、而不要使用类型信息

7、不要滥用反射
