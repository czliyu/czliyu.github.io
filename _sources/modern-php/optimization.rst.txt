PHP NGINX 调优
===========================

.. post:: 22 Apr 2021
   :tags: PHP, Nginx, 性能, 调优
   :category: php, 服务器, Server 
   :author: me


php.ini   
----------------

PHP解析器在php.ini文件中的配置和调优。

.. note::

   我们应该使用克里斯.科耐特开发的`PHP Iniscan`工具(https://github.com/psecio/iniscan)
   扫描`php.ini`文件，检查是否使用了安全方面的最佳实践。

内存
---------------

运行PHP最关心的是每个PHP进程要使用多少内存。

`memory_limit`:设定单个PHP进程可以使用的系统内存最大值

决定给PHP分配多少内存，以及能负担得起多少个PHP-FPM进程时，取决于::

   Q 一共能分配给PHP多少内存？
   首先，确定能分配给PHP多少系统内存。例如：这个设备有2GB内存，这台设备中可能还有其他进程(nginx、MySql或memcache),
   而这些进程也要消耗内存，我觉得留512MB给PHP就足够了。

   Q 单个PHP进程平均消耗多少内存？
   然后，确定单个PHP进程平均消耗多少内存。监控进程的内存使用量，使用命令行，可以执行`top`命令，查看运行中的进程的实时统计数据，。
   除此之外，还可以在PHP脚本的最后调用`memory_get_peak_usage()`,输出当前脚本消耗的最大内存量。不管哪种方式，都需要多次运行同一个脚本。
   然后取出内存消耗量的平均值。

   Q 能负担起多少个PHP-FPM进程？
   假设给PHP分配了512MB内存，每个PHP进程平均消耗15MB内存，512/15 = 34

   Q 有足够的系统资源吗？
   有足够的系统资源运行PHP应用并处理预期的流量？否定的话，那还是升级服务器，添加更多的内存。

Zend OPcache
----------------------

确定要分配的内存后，配置PHP的Zend OPcache 扩展，这个扩展用于缓存操作码。

为什么怎么做？

分析每次HTTP请求时通常是如何处理PHP脚本的::

   首先，nginx把HTTP请求转发给PHP-FPM，PHP-FPM再把请求交给莫个PHP子进程处理。
   
   PHP进程找到相应的PHP脚本后，读取脚本，吧PHP脚本编译成操作码格式，然后执行编译后得到的操作码，生成响应。
   
   最后，把HTTP响应发给Nginx，nginx再把响应发给HTTP客户端。

在`php.ini`文件中配置和优化Zend OPcache 扩展所用的设置

.. code-block:: java

      opcache.memory_consumption = 64
      opcache.interned_strings_buffer = 16
      opcache.max_accelerated_files = 4000
      opcache.validate_timestamps = 1
      opcache.revalidate_freq = 0
      opcache.fast_shutdown = 1

**opcache.memory_consumption = 64**

为操作码缓存分配的内存量（MB）。分配的内存量应该够保存应用中所有PHP脚本编译得到的操作码。
小型项目，脚本数少，可以设置为16MB，大型应用，脚本多，使用较大的值，例如64MB

**opcache.interned_strings_buffer = 16**

用来存储驻留字符串（interned_string）的内存量。

什么是**驻留字符串**? PHP解析器在背后会找到相同字符串的多个实例，把这个字符串保存在内存中，如果再次使用相同的
字符串，PHP解析器会使用指针。这么做能节省内存。

**opcache.max_accelerated_files = 4000**

操作码缓存中最多能存储多少个PHP脚本。这个设置的值可以是200到100000之间的任何数。这个值一定要比PHP应用的文件数量大

**opcache.validate_timestamps = 1**

设置值为1时， 经过一段时间后PHP会检查PHP脚本的内容是否有变化。检查的时间间隔由``opcache.revalidate_freq``设置指定。
如果为0，PHP不会检查PHP脚本的内容是否有变化，在开发环境设置为1， 在生产环境设为0。

**opcache.revalidate_freq = 0**

设置PHP多久（s）检查一次PHP脚本的内容是否有变化。缓存的好处是，不用每次请求都重新编译PHP脚本。这个设置用于多长时间内认为
操作码缓存是新的。仅当设置为1时，这么设置会在每次请求时都重新验证PHP文件。因此，在开发环境中，每次请求都会重新验证PHP文件（这是好事）。

**opcache.fast_shutdown = 1**

这么设置能让操作码使用更快的停机步骤,把对象析构和内存释放交给Zend Engine的内存管理器完成。只要把它设为1

文件上传
-------------------

如果应用允许上传文件，最好设置最大能上传的文件大小。除此之外，最好还要设置最后能同时上传多少个文件。

.. code-block:: java

   file_uploads = 1
   upload_max_filesize =10M
   max_file_uploads = 3

默认情况下，PHP允许在单次请求中上传20个文件，上传的每个文件最大为2MB。

把upload_max_filesize设置的值增加到了10MB，要根据应用的需求设为更高的值。
但是别设的太大的值，如果值太大，Web服务器会抱怨HTTP请求的主体太大了。或者请求会超时。

.. note::

   如果需要上传非常大的文件，Web服务器的配置需要做相应的调整。除了在php.ini中设置之外，
   可能还要调整nginx虚拟主机配置中client_max_body_size设置

最长执行时间
---------------

max_execution_time设置用于设定单个PHP进程在终止之前最长可以运行多长时间。默认值是30秒。
因为想让应用运行得特别快（以毫秒记）。建议设置为5秒。

.. code-block:: java

   max_execution_time = 5

处理会话
-------------

PHP默认的会话处理程序会拖慢大型应用，因为这个处理程序把会话数据存储在硬盘中，需要创建不必要的文件I/O,浪费时间。
把会话数据保存在内存中，例如使用memcached或Redis

把PHP默认的会话存储方式改为Memcached:

.. code-block:: java

   session.save_handler = "memcached"
   session.save_path = "127.0.0.2:11211"
   
缓存输出
--------------

如果在较少的块中发送更多的数据，而不是在较多的块中发送较少的数据，那么网络的效率会更高。也就是说，
在较少的片段中把内容传递给访问者的浏览器，能减少HTTP请求总数。

.. code-block:: java

   output_buffering = 4096
   implicit_flush = false

.. note::

   如果想修改输出缓存区的的大小，确保使用的值是4（32位系统）或8（64位系统）的倍数。

真实路径缓存
---------------

PHP会缓存应用使用的文件路径，这样每次包含或导入文件时就无需不断搜索包含路径了。这个缓存叫真实路径缓存。
如果使用大量文件，增加PHP真实路径缓存的大小能得到更好的性能。

.. code-block:: java

   realpath_cache_size = 64k

.. note::

   真实路径缓存的默认大小是16k。这个缓存所需的准确大小不容易确定，不过可以使用小技巧。
   首先，增加真实路径缓存的大小，设为特别大的值，例如256K。然后，在一个PHP脚本的末尾加上
   print_r(realpath_cache_size()); 输出真实路径缓存的真正大小。
   最后，把真实路径缓存的大小改为这个真正的值。
   