设计模式
==================

.. post:: 7 Sep 2020
   :tags: design, java, 设计模式, base
   :category: design, 设计模式, java
   :author: me

策略模式
---------------

::

    策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式
    让算法的变化独立于使用算法的客户。


`策略模式 <https://github.com/czliyu/head-first/tree/main/example/duck>`_

观察者模式
-----------------

::

    观察者模式定义了对象之间一对多的依赖，这样一来，当一个对象改变状态时，
    它的所有依赖都会收到通知并自动更新。

装饰者模式
-------------------

::

    装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性de
    替代方案。

重点在于，装饰者和被装饰者必须是一样的类型。也就是有共同的超类。

装饰者通常是用其他类似于工厂或者生成器这样的模式创建的。

缺点：利用装饰者模式，常常造成设计中有大量的小类。

工厂方法模式
---------------

::

    工厂方法模式定义了一个创建对象的接口，但由于类决定要实例化的类是哪一个。工厂方法
    让类把实例化推迟到子类。

.. note::

    我们不应该针对实现编程，但是当我们使用new时，不正是在针对实现编程吗？

简单工厂其实不是一种设计模式。反而比较像是一种编程习惯。

抽象工厂模式
-----------------

::

    抽象工厂模式提供了一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。

抽象工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要知道实际产出的具体产品是什么。

抽象工厂的方法经常以工厂方法的方式实现。

单件模式
--------------

::

    单件模式确保一个类只有一个实例，并提供一个全局访问点。

把getInstance()变成同步(synchronized)方法，多线程灾难就可以轻易解决。


.. code-block:: java

   public class Singleton {
       private static Singleton uniqueInstance;

       private Singleton() {}

       /*
        * synchronized 迫使每个线程在进入这个方法之前
        * 先等候别的线程离开这个方法。不会有两个线程同时进入
        */
       public static synchronized Singleton getInstance() {
       if (uniqueInstance == null) {
           uniqueInstance = new Singleton();
       }
       return uniqueInstance;
       }
   }
   
改善多线程
--------------

"急切"创建实例，而不用延迟实例化的做法

.. code-block:: java

   public class Singleton {
       /*
        * 在静态初始化中创建事件，
        * 保证了线程安全
        */
       private static Singleton uniqueInstance = new Singleton();

       private Singleton() {}

       public static Singleton getInstance() {
           // 实例已存在，直接使用
           return uniqueInstance;
       }
   }


"双重检查加锁"，在getInstance()中减少使用同步

.. code-block:: java

   public class Singleton {
       
       /**
        * volatile 确保当uniqueInstance被初始化成Singleton实例时
        * 多个线程正确地处理uniqueInstance变量
        */
       private volatile static Singleton uniqueInstance;

       private Singleton () {}

       public static Singleton getInstance() {
           if (uniqueInstance == null) {
               synchronized (Singleton.class) {
                   if (uniqueInstance == null)  {
                       uniqueInstance = new Singleton();
                   }
               }
           }
           return uniqueInstance; 
       }
   }


命令模式
------------

命令模式可将“动作的请求者”从“动作的执行者”对象中解耦。

::

    命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可
    撤销操作。

使用命令模式来实现“队列、日志和支持撤销操作”


适配器模式
---------------------

::

    适配器模式将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间


.. note::

    类适配器不是使用组合来适配被适配者，而是继承被适配者和目标类。


外观模式
--------------

::

    外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统
    更容易使用。

.. note::

    外观不只是简化了接口，也将客户从组件的子系统中解耦。
    外观和适配器可以包装许多类，但是外观是意图是简化接口，而适配器的意图是将接口转换成不同接口。


模板方法模式
-----------------

::

    模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以
    在不改变算法结构的情况下，重新定义算法中的某些步骤。

迭代器模式
---------------

::

    迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。

