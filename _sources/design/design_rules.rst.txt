设计模式 -- 设计原则
=========================

.. post:: 6 Sep 2020
   :tags: 设计模式, design patterns, java, base
   :category: design, 设计模式, java
   :author: me





设计原则1 
------------

::

    找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。

设计原则2
-------------

::

    针对接口编程，而不是针对实现编程
    
**针对接口编程** 真正的意思是“针对超类型编程”::

    接口是一个概念，也是一种java的interface构造。关键就在于多态。
    利用多态，程序可以针对超类型编程，执行时会根据实际状况执行真正的行为，不会被绑死在超类型的行为上。
    “针对超类型编程”更明确的说成变量的声明类型应该是超类型，通常是一个抽象类或者是一个接口。
    如此，只要是具体实现此超类型的类所产生的对象，都可以指定给这个变量。这也就意味着，声明类时不用理会以后执行时的真正对象类型。

.. code-block:: java

    /*
    * 针对实现编程
    * d 为 Dog类型 (Animal 的具体实现)
    */
    Dog d = new Dog();
    d.bark();

    /*
    * 针对接口/超类型编程
    * 该对象为Dog，但是现在利用animal进行多态调用
    */
    Animal animal = new Dog();
    animal.makeSound();

设计原则3 
------------

::

    多用组合，少用继承。

设计原则4
--------------

::

    为了交互对象之间的松耦合设计而努力。

设计原则5
---------------

::

    类应该对扩展开放，对修改关闭。

设计原则6: 依赖倒置原则
--------------------------

::

    要依赖抽象，不要依赖具体类。

这个原则说明了： 不能让高层组件依赖低层组件，而且，不管高层或低层组件，“两者”都应该
依赖于抽象。

使用一下几条方针，可以遵循此原则

* 变量不可以持有具体类的引用
* 不要让类派生自具体类
* 不要覆盖基类中已实现的方法。